// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: atlas/v1/atlas.proto

package atlasv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/markormesher/atlas/internal/gen/atlas/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AtlasServiceName is the fully-qualified name of the AtlasService service.
	AtlasServiceName = "atlas.v1.AtlasService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AtlasServiceGetPlacesProcedure is the fully-qualified name of the AtlasService's GetPlaces RPC.
	AtlasServiceGetPlacesProcedure = "/atlas.v1.AtlasService/GetPlaces"
	// AtlasServiceSavePlaceProcedure is the fully-qualified name of the AtlasService's SavePlace RPC.
	AtlasServiceSavePlaceProcedure = "/atlas.v1.AtlasService/SavePlace"
	// AtlasServiceDeletePlaceProcedure is the fully-qualified name of the AtlasService's DeletePlace
	// RPC.
	AtlasServiceDeletePlaceProcedure = "/atlas.v1.AtlasService/DeletePlace"
	// AtlasServiceAuthCheckProcedure is the fully-qualified name of the AtlasService's AuthCheck RPC.
	AtlasServiceAuthCheckProcedure = "/atlas.v1.AtlasService/AuthCheck"
)

// AtlasServiceClient is a client for the atlas.v1.AtlasService service.
type AtlasServiceClient interface {
	GetPlaces(context.Context, *connect.Request[v1.GetPlacesRequest]) (*connect.Response[v1.GetPlacesResponse], error)
	SavePlace(context.Context, *connect.Request[v1.SavePlaceRequest]) (*connect.Response[v1.SavePlaceResponse], error)
	DeletePlace(context.Context, *connect.Request[v1.DeletePlaceRequest]) (*connect.Response[v1.DeletePlaceResponse], error)
	AuthCheck(context.Context, *connect.Request[v1.AuthCheckRequest]) (*connect.Response[v1.AuthCheckResponse], error)
}

// NewAtlasServiceClient constructs a client for the atlas.v1.AtlasService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAtlasServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AtlasServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	atlasServiceMethods := v1.File_atlas_v1_atlas_proto.Services().ByName("AtlasService").Methods()
	return &atlasServiceClient{
		getPlaces: connect.NewClient[v1.GetPlacesRequest, v1.GetPlacesResponse](
			httpClient,
			baseURL+AtlasServiceGetPlacesProcedure,
			connect.WithSchema(atlasServiceMethods.ByName("GetPlaces")),
			connect.WithClientOptions(opts...),
		),
		savePlace: connect.NewClient[v1.SavePlaceRequest, v1.SavePlaceResponse](
			httpClient,
			baseURL+AtlasServiceSavePlaceProcedure,
			connect.WithSchema(atlasServiceMethods.ByName("SavePlace")),
			connect.WithClientOptions(opts...),
		),
		deletePlace: connect.NewClient[v1.DeletePlaceRequest, v1.DeletePlaceResponse](
			httpClient,
			baseURL+AtlasServiceDeletePlaceProcedure,
			connect.WithSchema(atlasServiceMethods.ByName("DeletePlace")),
			connect.WithClientOptions(opts...),
		),
		authCheck: connect.NewClient[v1.AuthCheckRequest, v1.AuthCheckResponse](
			httpClient,
			baseURL+AtlasServiceAuthCheckProcedure,
			connect.WithSchema(atlasServiceMethods.ByName("AuthCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// atlasServiceClient implements AtlasServiceClient.
type atlasServiceClient struct {
	getPlaces   *connect.Client[v1.GetPlacesRequest, v1.GetPlacesResponse]
	savePlace   *connect.Client[v1.SavePlaceRequest, v1.SavePlaceResponse]
	deletePlace *connect.Client[v1.DeletePlaceRequest, v1.DeletePlaceResponse]
	authCheck   *connect.Client[v1.AuthCheckRequest, v1.AuthCheckResponse]
}

// GetPlaces calls atlas.v1.AtlasService.GetPlaces.
func (c *atlasServiceClient) GetPlaces(ctx context.Context, req *connect.Request[v1.GetPlacesRequest]) (*connect.Response[v1.GetPlacesResponse], error) {
	return c.getPlaces.CallUnary(ctx, req)
}

// SavePlace calls atlas.v1.AtlasService.SavePlace.
func (c *atlasServiceClient) SavePlace(ctx context.Context, req *connect.Request[v1.SavePlaceRequest]) (*connect.Response[v1.SavePlaceResponse], error) {
	return c.savePlace.CallUnary(ctx, req)
}

// DeletePlace calls atlas.v1.AtlasService.DeletePlace.
func (c *atlasServiceClient) DeletePlace(ctx context.Context, req *connect.Request[v1.DeletePlaceRequest]) (*connect.Response[v1.DeletePlaceResponse], error) {
	return c.deletePlace.CallUnary(ctx, req)
}

// AuthCheck calls atlas.v1.AtlasService.AuthCheck.
func (c *atlasServiceClient) AuthCheck(ctx context.Context, req *connect.Request[v1.AuthCheckRequest]) (*connect.Response[v1.AuthCheckResponse], error) {
	return c.authCheck.CallUnary(ctx, req)
}

// AtlasServiceHandler is an implementation of the atlas.v1.AtlasService service.
type AtlasServiceHandler interface {
	GetPlaces(context.Context, *connect.Request[v1.GetPlacesRequest]) (*connect.Response[v1.GetPlacesResponse], error)
	SavePlace(context.Context, *connect.Request[v1.SavePlaceRequest]) (*connect.Response[v1.SavePlaceResponse], error)
	DeletePlace(context.Context, *connect.Request[v1.DeletePlaceRequest]) (*connect.Response[v1.DeletePlaceResponse], error)
	AuthCheck(context.Context, *connect.Request[v1.AuthCheckRequest]) (*connect.Response[v1.AuthCheckResponse], error)
}

// NewAtlasServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAtlasServiceHandler(svc AtlasServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	atlasServiceMethods := v1.File_atlas_v1_atlas_proto.Services().ByName("AtlasService").Methods()
	atlasServiceGetPlacesHandler := connect.NewUnaryHandler(
		AtlasServiceGetPlacesProcedure,
		svc.GetPlaces,
		connect.WithSchema(atlasServiceMethods.ByName("GetPlaces")),
		connect.WithHandlerOptions(opts...),
	)
	atlasServiceSavePlaceHandler := connect.NewUnaryHandler(
		AtlasServiceSavePlaceProcedure,
		svc.SavePlace,
		connect.WithSchema(atlasServiceMethods.ByName("SavePlace")),
		connect.WithHandlerOptions(opts...),
	)
	atlasServiceDeletePlaceHandler := connect.NewUnaryHandler(
		AtlasServiceDeletePlaceProcedure,
		svc.DeletePlace,
		connect.WithSchema(atlasServiceMethods.ByName("DeletePlace")),
		connect.WithHandlerOptions(opts...),
	)
	atlasServiceAuthCheckHandler := connect.NewUnaryHandler(
		AtlasServiceAuthCheckProcedure,
		svc.AuthCheck,
		connect.WithSchema(atlasServiceMethods.ByName("AuthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/atlas.v1.AtlasService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AtlasServiceGetPlacesProcedure:
			atlasServiceGetPlacesHandler.ServeHTTP(w, r)
		case AtlasServiceSavePlaceProcedure:
			atlasServiceSavePlaceHandler.ServeHTTP(w, r)
		case AtlasServiceDeletePlaceProcedure:
			atlasServiceDeletePlaceHandler.ServeHTTP(w, r)
		case AtlasServiceAuthCheckProcedure:
			atlasServiceAuthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAtlasServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAtlasServiceHandler struct{}

func (UnimplementedAtlasServiceHandler) GetPlaces(context.Context, *connect.Request[v1.GetPlacesRequest]) (*connect.Response[v1.GetPlacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("atlas.v1.AtlasService.GetPlaces is not implemented"))
}

func (UnimplementedAtlasServiceHandler) SavePlace(context.Context, *connect.Request[v1.SavePlaceRequest]) (*connect.Response[v1.SavePlaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("atlas.v1.AtlasService.SavePlace is not implemented"))
}

func (UnimplementedAtlasServiceHandler) DeletePlace(context.Context, *connect.Request[v1.DeletePlaceRequest]) (*connect.Response[v1.DeletePlaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("atlas.v1.AtlasService.DeletePlace is not implemented"))
}

func (UnimplementedAtlasServiceHandler) AuthCheck(context.Context, *connect.Request[v1.AuthCheckRequest]) (*connect.Response[v1.AuthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("atlas.v1.AtlasService.AuthCheck is not implemented"))
}
